/**
 * „Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞Ê©üËÉΩ
 * Google Sheets„Å´„Ç¢„ÇØ„Çª„ÇπÂ±•Ê≠¥„ÇíËá™ÂãïË®òÈå≤
 */

// „É≠„Ç∞Ë®≠ÂÆö
const LOG_CONFIG = {
  SHEET_NAME: '„Éù„Éº„Éà„Éï„Ç©„É™„Ç™_„Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞',
  MAX_ROWS: 10000, // ÊúÄÂ§ß‰øùÂ≠òË°åÊï∞
  COLUMNS: ['„Çø„Ç§„É†„Çπ„Çø„É≥„Éó', '„É¶„Éº„Ç∂„Éº', '„Ç¢„ÇØ„Ç∑„Éß„É≥', 'IP„Ç¢„Éâ„É¨„Çπ', '„É¶„Éº„Ç∂„Éº„Ç®„Éº„Ç∏„Çß„É≥„Éà', 'Ë©≥Á¥∞']
};

/**
 * „É≠„Ç∞Áî®„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà„Çí‰ΩúÊàê„Åæ„Åü„ÅØÂèñÂæó
 */
function getOrCreateLogSheet() {
  const cache = CacheService.getScriptCache();
  const cacheKey = 'log_sheet_id';
  let sheetId = cache.get(cacheKey);
  
  if (sheetId) {
    try {
      return SpreadsheetApp.openById(sheetId);
    } catch (e) {
      // „Ç≠„É£„ÉÉ„Ç∑„É•„ÅåÁÑ°Âäπ„Å™Â†¥Âêà„ÅØÂÜç‰ΩúÊàê
    }
  }
  
  // Êó¢Â≠ò„ÅÆ„Ç∑„Éº„Éà„ÇíÊ§úÁ¥¢
  const files = DriveApp.getFilesByName(LOG_CONFIG.SHEET_NAME);
  if (files.hasNext()) {
    const sheet = SpreadsheetApp.open(files.next());
    cache.put(cacheKey, sheet.getId(), 3600);
    return sheet;
  }
  
  // Êñ∞Ë¶è‰ΩúÊàê
  const sheet = SpreadsheetApp.create(LOG_CONFIG.SHEET_NAME);
  const ws = sheet.getActiveSheet();
  
  // „Éò„ÉÉ„ÉÄ„ÉºË®≠ÂÆö
  ws.getRange(1, 1, 1, LOG_CONFIG.COLUMNS.length).setValues([LOG_CONFIG.COLUMNS]);
  ws.getRange(1, 1, 1, LOG_CONFIG.COLUMNS.length)
    .setBackground('#1e3a8a')
    .setFontColor('#ffffff')
    .setFontWeight('bold');
  
  // ÂàóÂπÖË™øÊï¥
  ws.setColumnWidth(1, 180); // „Çø„Ç§„É†„Çπ„Çø„É≥„Éó
  ws.setColumnWidth(2, 200); // „É¶„Éº„Ç∂„Éº
  ws.setColumnWidth(3, 120); // „Ç¢„ÇØ„Ç∑„Éß„É≥
  ws.setColumnWidth(4, 150); // IP„Ç¢„Éâ„É¨„Çπ
  ws.setColumnWidth(5, 300); // „É¶„Éº„Ç∂„Éº„Ç®„Éº„Ç∏„Çß„É≥„Éà
  ws.setColumnWidth(6, 400); // Ë©≥Á¥∞
  
  // „Éï„Ç£„É´„Çø„ÉºËøΩÂä†
  ws.getRange(1, 1, 1, LOG_CONFIG.COLUMNS.length).createFilter();
  
  cache.put(cacheKey, sheet.getId(), 3600);
  return sheet;
}

/**
 * „Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞„ÇíË®òÈå≤
 */
function logAccess(action, details = '') {
  try {
    const sheet = getOrCreateLogSheet();
    const ws = sheet.getActiveSheet();
    
    // ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±
    const user = Session.getActiveUser().getEmail() || 'Unknown';
    const timestamp = new Date();
    
    // „É™„ÇØ„Ç®„Çπ„ÉàÊÉÖÂ†±ÔºàÂà©Áî®ÂèØËÉΩ„Å™Â†¥ÂêàÔºâ
    let ipAddress = 'N/A';
    let userAgent = 'N/A';
    
    // HtmlService„ÅÆ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Åã„ÇâÊÉÖÂ†±„ÇíÂèñÂæóÔºàÂèØËÉΩ„Å™Â†¥ÂêàÔºâ
    try {
      // GAS„Åß„ÅØÁõ¥Êé•IP„Ç¢„Éâ„É¨„Çπ„ÅØÂèñÂæó„Åß„Åç„Å™„ÅÑ„Åå„ÄÅÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®„Å´Ê∫ñÂÇô
      ipAddress = 'GAS Internal';
      userAgent = 'GAS Web App';
    } catch (e) {
      // „Ç®„É©„Éº„ÅØÁÑ°Ë¶ñ
    }
    
    // „É≠„Ç∞„Éá„Éº„Çø
    const logData = [
      timestamp,
      user,
      action,
      ipAddress,
      userAgent,
      details
    ];
    
    // ÊúÄÁµÇË°å„Å´ËøΩÂä†
    ws.appendRow(logData);
    
    // Âè§„ÅÑ„É≠„Ç∞„ÇíÂâäÈô§ÔºàMAX_ROWS„ÇíË∂Ö„Åà„ÅüÂ†¥ÂêàÔºâ
    const lastRow = ws.getLastRow();
    if (lastRow > LOG_CONFIG.MAX_ROWS + 1) { // +1 for header
      ws.deleteRows(2, lastRow - LOG_CONFIG.MAX_ROWS - 1);
    }
    
    return true;
  } catch (e) {
    console.error('„É≠„Ç∞Ë®òÈå≤„Ç®„É©„Éº:', e);
    return false;
  }
}

/**
 * „É≠„Ç∞Áµ±Ë®à„ÇíÂèñÂæó
 */
function getLogStatistics() {
  try {
    const sheet = getOrCreateLogSheet();
    const ws = sheet.getActiveSheet();
    const lastRow = ws.getLastRow();
    
    if (lastRow <= 1) {
      return {
        totalAccess: 0,
        uniqueUsers: 0,
        todayAccess: 0,
        lastAccess: null
      };
    }
    
    // „Éá„Éº„ÇøÁØÑÂõ≤„ÇíÂèñÂæó
    const data = ws.getRange(2, 1, lastRow - 1, LOG_CONFIG.COLUMNS.length).getValues();
    
    // Áµ±Ë®àË®àÁÆó
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    let todayCount = 0;
    const uniqueUsers = new Set();
    let lastAccessTime = null;
    
    data.forEach(row => {
      const timestamp = new Date(row[0]);
      const user = row[1];
      
      uniqueUsers.add(user);
      
      if (timestamp >= today) {
        todayCount++;
      }
      
      if (!lastAccessTime || timestamp > lastAccessTime) {
        lastAccessTime = timestamp;
      }
    });
    
    return {
      totalAccess: data.length,
      uniqueUsers: uniqueUsers.size,
      todayAccess: todayCount,
      lastAccess: lastAccessTime,
      recentLogs: data.slice(-10).reverse() // ÊúÄÊñ∞10‰ª∂
    };
    
  } catch (e) {
    console.error('Áµ±Ë®àÂèñÂæó„Ç®„É©„Éº:', e);
    return null;
  }
}

/**
 * ‰∏çÂØ©„Å™„Ç¢„ÇØ„Çª„Çπ„ÇíÊ§úÁü•
 */
function detectSuspiciousAccess() {
  try {
    const sheet = getOrCreateLogSheet();
    const ws = sheet.getActiveSheet();
    const lastRow = ws.getLastRow();
    
    if (lastRow <= 1) return [];
    
    // ÈÅéÂéª1ÊôÇÈñì„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó
    const oneHourAgo = new Date(Date.now() - 3600000);
    const data = ws.getRange(2, 1, lastRow - 1, LOG_CONFIG.COLUMNS.length).getValues();
    
    const userAccessCount = {};
    const suspiciousActivities = [];
    
    data.forEach(row => {
      const timestamp = new Date(row[0]);
      const user = row[1];
      const action = row[2];
      
      if (timestamp >= oneHourAgo) {
        userAccessCount[user] = (userAccessCount[user] || 0) + 1;
        
        // Áü≠ÊôÇÈñì„Åß„ÅÆÂ§ßÈáè„Ç¢„ÇØ„Çª„Çπ„ÇíÊ§úÁü•
        if (userAccessCount[user] > 50) {
          suspiciousActivities.push({
            user: user,
            count: userAccessCount[user],
            type: 'Áü≠ÊôÇÈñì„Åß„ÅÆÂ§ßÈáè„Ç¢„ÇØ„Çª„Çπ'
          });
        }
      }
      
      // Ê∑±Â§ú„ÅÆ„Ç¢„ÇØ„Çª„Çπ„ÇíÊ§úÁü•
      const hour = timestamp.getHours();
      if (hour >= 2 && hour <= 5) {
        suspiciousActivities.push({
          user: user,
          time: timestamp,
          type: 'Ê∑±Â§ú„Ç¢„ÇØ„Çª„Çπ'
        });
      }
    });
    
    return suspiciousActivities;
    
  } catch (e) {
    console.error('‰∏çÂØ©„Ç¢„ÇØ„Çª„ÇπÊ§úÁü•„Ç®„É©„Éº:', e);
    return [];
  }
}

/**
 * „É≠„Ç∞„Éì„É•„Éº„Ç¢HTML
 */
function getLogViewerHtml() {
  return `
    <div style="padding: 20px; font-family: Arial, sans-serif;">
      <h2>üìä „Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞Áµ±Ë®à</h2>
      <div id="logStats" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0;">
        <div style="background: #f0f4ff; padding: 15px; border-radius: 8px;">
          <div style="color: #666; font-size: 0.9em;">Á∑è„Ç¢„ÇØ„Çª„ÇπÊï∞</div>
          <div style="font-size: 1.5em; font-weight: bold; color: #1e3a8a;" id="totalAccess">-</div>
        </div>
        <div style="background: #f0f4ff; padding: 15px; border-radius: 8px;">
          <div style="color: #666; font-size: 0.9em;">„É¶„Éã„Éº„ÇØ„É¶„Éº„Ç∂„Éº</div>
          <div style="font-size: 1.5em; font-weight: bold; color: #1e3a8a;" id="uniqueUsers">-</div>
        </div>
        <div style="background: #f0f4ff; padding: 15px; border-radius: 8px;">
          <div style="color: #666; font-size: 0.9em;">Êú¨Êó•„ÅÆ„Ç¢„ÇØ„Çª„Çπ</div>
          <div style="font-size: 1.5em; font-weight: bold; color: #1e3a8a;" id="todayAccess">-</div>
        </div>
        <div style="background: #f0f4ff; padding: 15px; border-radius: 8px;">
          <div style="color: #666; font-size: 0.9em;">ÊúÄÁµÇ„Ç¢„ÇØ„Çª„Çπ</div>
          <div style="font-size: 0.9em; color: #1e3a8a;" id="lastAccess">-</div>
        </div>
      </div>
      
      <h3>üìú ÊúÄËøë„ÅÆ„Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞</h3>
      <div id="recentLogs" style="max-height: 300px; overflow-y: auto; border: 1px solid #ddd; border-radius: 8px; padding: 10px;">
        <table style="width: 100%; border-collapse: collapse;">
          <thead>
            <tr style="background: #f5f5f5;">
              <th style="padding: 8px; text-align: left;">ÊôÇÂàª</th>
              <th style="padding: 8px; text-align: left;">„É¶„Éº„Ç∂„Éº</th>
              <th style="padding: 8px; text-align: left;">„Ç¢„ÇØ„Ç∑„Éß„É≥</th>
              <th style="padding: 8px; text-align: left;">Ë©≥Á¥∞</th>
            </tr>
          </thead>
          <tbody id="logTableBody">
          </tbody>
        </table>
      </div>
      
      <div id="suspiciousAlert" style="margin-top: 20px; display: none;">
        <h3 style="color: #dc2626;">‚ö†Ô∏è ‰∏çÂØ©„Å™„Ç¢„ÇØ„Çª„Çπ</h3>
        <div id="suspiciousContent" style="background: #fef2f2; border: 1px solid #fecaca; border-radius: 8px; padding: 15px;">
        </div>
      </div>
    </div>
    
    <script>
      function loadLogStats() {
        google.script.run
          .withSuccessHandler(displayLogStats)
          .withFailureHandler(console.error)
          .getLogStatistics();
          
        google.script.run
          .withSuccessHandler(displaySuspicious)
          .withFailureHandler(console.error)
          .detectSuspiciousAccess();
      }
      
      function displayLogStats(stats) {
        if (!stats) return;
        
        document.getElementById('totalAccess').textContent = stats.totalAccess;
        document.getElementById('uniqueUsers').textContent = stats.uniqueUsers;
        document.getElementById('todayAccess').textContent = stats.todayAccess;
        document.getElementById('lastAccess').textContent = 
          stats.lastAccess ? new Date(stats.lastAccess).toLocaleString('ja-JP') : '„Å™„Åó';
        
        // ÊúÄËøë„ÅÆ„É≠„Ç∞Ë°®Á§∫
        const tbody = document.getElementById('logTableBody');
        tbody.innerHTML = '';
        
        if (stats.recentLogs) {
          stats.recentLogs.forEach(log => {
            const row = tbody.insertRow();
            row.insertCell(0).textContent = new Date(log[0]).toLocaleString('ja-JP');
            row.insertCell(1).textContent = log[1];
            row.insertCell(2).textContent = log[2];
            row.insertCell(3).textContent = log[5] || '-';
          });
        }
      }
      
      function displaySuspicious(activities) {
        if (!activities || activities.length === 0) return;
        
        const alert = document.getElementById('suspiciousAlert');
        const content = document.getElementById('suspiciousContent');
        
        alert.style.display = 'block';
        content.innerHTML = activities.map(a => 
          '<div style="margin-bottom: 8px;">‚Ä¢ ' + a.type + ': ' + a.user + '</div>'
        ).join('');
      }
      
      // ÂàùÂõûË™≠„ÅøËæº„Åø
      loadLogStats();
      
      // 30Áßí„Åî„Å®„Å´Êõ¥Êñ∞
      setInterval(loadLogStats, 30000);
    </script>
  `;
}

/**
 * Êõ¥Êñ∞ÁâàdoGet - „É≠„Ç∞Ë®òÈå≤‰ªò„Åç
 */
function doGetWithLogging(e) {
  const startTime = new Date();
  const page = e.parameter.page || 'dashboard';
  
  try {
    // „Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞Ë®òÈå≤
    logAccess('„Éö„Éº„Ç∏„Ç¢„ÇØ„Çª„Çπ', `„Éö„Éº„Ç∏: ${page}`);
    
    // „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ
    validateAccess();
    
    if (page === 'api') {
      return handleApiWithLogging(e);
    } else if (page === 'logs') {
      // „É≠„Ç∞„Éì„É•„Éº„Ç¢
      return HtmlService
        .createHtmlOutput(getLogViewerHtml())
        .setTitle('„Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞')
        .addMetaTag('viewport', 'width=device-width, initial-scale=1');
    }
    
    return HtmlService
      .createTemplateFromFile('index_integrated')
      .evaluate()
      .setTitle('„Éù„Éº„Éà„Éï„Ç©„É™„Ç™„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ')
      .addMetaTag('viewport', 'width=device-width, initial-scale=1')
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
      
  } catch (error) {
    logAccess('„Ç®„É©„Éº', error.toString());
    throw error;
  }
}

/**
 * Êõ¥Êñ∞ÁâàAPI„Éè„É≥„Éâ„É©„Éº - „É≠„Ç∞Ë®òÈå≤‰ªò„Åç
 */
function handleApiWithLogging(e) {
  const action = e.parameter.action;
  
  try {
    logAccess('APIÂëº„Å≥Âá∫„Åó', `„Ç¢„ÇØ„Ç∑„Éß„É≥: ${action}`);
    
    let result = {};
    switch(action) {
      case 'getPortfolio':
        result = getIntegratedPortfolioData();
        break;
      case 'getLatestReport':
        result = getLatestReportFromDrive();
        break;
      case 'refreshData':
        CacheService.getScriptCache().remove('integrated_portfolio_data');
        result = getIntegratedPortfolioData();
        break;
      case 'getLogStats':
        result = getLogStatistics();
        break;
      default:
        result = { error: 'Unknown action' };
    }
    
    return ContentService
      .createTextOutput(JSON.stringify(result))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch(error) {
    logAccess('API„Ç®„É©„Éº', `${action}: ${error.toString()}`);
    return ContentService
      .createTextOutput(JSON.stringify({ error: error.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * „É≠„Ç∞„ÅÆ„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÊ©üËÉΩ
 */
function exportLogs() {
  try {
    const sheet = getOrCreateLogSheet();
    const url = sheet.getUrl();
    
    // CSV„Å®„Åó„Å¶„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂèØËÉΩ„Å™„É™„É≥„ÇØ„ÇíÁîüÊàê
    const csvUrl = url.replace(/\/edit.*$/, '/export?format=csv');
    
    return {
      sheetUrl: url,
      csvUrl: csvUrl
    };
  } catch (e) {
    console.error('„É≠„Ç∞„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Ç®„É©„Éº:', e);
    return null;
  }
}