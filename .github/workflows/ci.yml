name: CI/CD Pipeline
# メインCI/CDパイプライン - プルリクエストとプッシュ時に実行

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # 手動実行も可能

env:
  PYTHON_VERSION: "3.11"
  CACHE_VERSION: v1

jobs:
  # 1. コード品質チェック
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy isort bandit safety
        
    - name: Code formatting check (Black)
      run: |
        echo "Checking code formatting with Black..."
        black --check --diff .
        
    - name: Import sorting check (isort)
      run: |
        echo "Checking import sorting with isort..."
        isort --check-only --diff .
        
    - name: Linting (flake8)
      run: |
        echo "Running flake8 linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Type checking (mypy)
      run: |
        echo "Running type checking with mypy..."
        mypy --install-types --non-interactive || true
        mypy . --ignore-missing-imports --show-error-codes || true
        
    - name: Security scan (bandit)
      run: |
        echo "Running security scan with bandit..."
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --skip B101 || true
        
    - name: Dependency security check (safety)
      run: |
        echo "Checking dependencies for known vulnerabilities..."
        safety check --json --output safety-report.json || true
        safety check || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # 2. テスト実行（複数Pythonバージョン）
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock
        
    - name: Run tests with coverage
      run: |
        echo "Running test suite with coverage..."
        pytest test_stock_analyzer.py \
          --cov=stock_analyzer_lib \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=70 \
          -v \
          --tb=short
          
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

  # 3. 統合テスト（実データ取得テスト）
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test real data fetching
      run: |
        echo "Testing real data fetching with popular stocks..."
        python -c "
        from stock_analyzer_lib import StockAnalyzer
        import sys
        
        # テスト用ティッカーリスト
        test_tickers = ['AAPL', 'MSFT', 'GOOGL', 'TSLA']
        analyzer = StockAnalyzer()
        
        failed_tickers = []
        for ticker in test_tickers:
            try:
                success, message = analyzer.analyze_stock(ticker)
                if not success:
                    failed_tickers.append(f'{ticker}: {message}')
                else:
                    print(f'✅ {ticker}: Success')
            except Exception as e:
                failed_tickers.append(f'{ticker}: {str(e)}')
        
        if failed_tickers:
            print('❌ Failed tickers:')
            for failure in failed_tickers:
                print(f'  - {failure}')
            # 50%以上成功すれば統合テスト成功とする
            if len(failed_tickers) < len(test_tickers) / 2:
                print('Integration test passed (partial success)')
                sys.exit(0)
            else:
                print('Integration test failed (too many failures)')
                sys.exit(1)
        else:
            print('🎉 All integration tests passed!')
        "
        
    - name: Upload integration test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-outputs
        path: |
          charts/
          *.csv

  # 4. パフォーマンステスト
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler psutil
        
    - name: Memory and performance profiling
      run: |
        echo "Running performance profiling..."
        python -c "
        import time
        import psutil
        import os
        from stock_analyzer_lib import StockAnalyzer, TechnicalIndicators
        import pandas as pd
        import numpy as np
        
        # メモリ使用量チェック
        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        # 大量データでのパフォーマンステスト
        dates = pd.date_range('2020-01-01', periods=1000, freq='D')
        np.random.seed(42)
        large_data = pd.DataFrame({
            'Open': 100 + np.cumsum(np.random.randn(1000) * 0.01),
            'High': 100 + np.cumsum(np.random.randn(1000) * 0.01) + 1,
            'Low': 100 + np.cumsum(np.random.randn(1000) * 0.01) - 1,
            'Close': 100 + np.cumsum(np.random.randn(1000) * 0.01),
            'Volume': abs(np.random.randn(1000) * 1000000)
        }, index=dates)
        
        # テクニカル指標計算の処理時間測定
        start_time = time.time()
        
        from stock_analyzer_lib import ConfigManager
        config = ConfigManager()
        result = TechnicalIndicators.calculate_moving_averages(large_data, config)
        result['RSI'] = TechnicalIndicators.calculate_rsi(large_data)
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        memory_used = final_memory - initial_memory
        
        print(f'📊 Performance Results:')
        print(f'  - Processing time: {processing_time:.3f} seconds')
        print(f'  - Memory used: {memory_used:.2f} MB')
        print(f'  - Data points processed: {len(large_data)}')
        print(f'  - Processing rate: {len(large_data)/processing_time:.0f} points/second')
        
        # パフォーマンス基準チェック
        if processing_time > 5.0:  # 5秒以上は遅すぎる
            print('❌ Performance test failed: Processing too slow')
            exit(1)
        if memory_used > 500:  # 500MB以上は多すぎる
            print('❌ Performance test failed: Memory usage too high')
            exit(1)
            
        print('✅ Performance test passed')
        "

  # 5. ビルドテスト
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        
    - name: Build package
      run: |
        echo "Building package..."
        python -m build
        
    - name: Test installation
      run: |
        echo "Testing package installation..."
        pip install dist/*.whl
        python -c "import stock_analyzer_lib; print('✅ Package import successful')"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  # 6. 通知
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, test, integration-test, performance-test, build-test]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.code-quality.result == 'success' && needs.test.result == 'success'
      run: |
        echo "🎉 CI/CD Pipeline completed successfully!"
        echo "✅ Code quality: PASSED"
        echo "✅ Tests: PASSED"
        echo "✅ Build: PASSED"
        
    - name: Notify failure
      if: needs.code-quality.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ CI/CD Pipeline failed!"
        echo "Code quality: ${{ needs.code-quality.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build-test.result }}"
        exit 1